 import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.sql.*;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import java.awt.event.ActionListener;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.ArrayList;

import net.proteanit.sql.DbUtils;
import javax.swing.GroupLayout.Alignment;
import javax.swing.GroupLayout;
import javax.swing.LayoutStyle.ComponentPlacement;
import javax.swing.ListModel;
import javax.swing.RowFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;
import javax.swing.JLabel;
import javax.swing.JComboBox;
import javax.swing.JList;
import java.awt.Color;
import javax.swing.JTextField;
import javax.swing.JTable;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JButton;
import javax.swing.AbstractListModel;
import java.awt.event.ItemListener;
import java.awt.event.ItemEvent;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.event.ListSelectionEvent;
/**
 * @author aturn
 */
public class StudentRegistration extends javax.swing.JFrame {

    Connection connection = null;
    ResultSet rs = null;
    PreparedStatement pst = null;


    /**
     * Creates new form Admin
     */
    public StudentRegistration() {
        initComponents();

        //Connects to the database
        connection = DatabaseConnection.dbConnector();
        staricon();
        setTitle("Stellar: Administrator");
        setLocationRelativeTo(null);
        fetchStudents();
        fetchTeachers();
        fetchClasses();
        fetchClassInstructor();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        admin_panel = new javax.swing.JPanel();
        admin_tab = new javax.swing.JTabbedPane();
        addclass_tab = new javax.swing.JPanel();
        addclass_spanel = new javax.swing.JScrollPane();
        classes_table = new javax.swing.JTable();
        logout_button = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        admin_panel.setBackground(new java.awt.Color(204, 204, 204));

        admin_tab.setBackground(new java.awt.Color(255, 215, 73));
        admin_tab.setForeground(new java.awt.Color(51, 51, 51));

        addclass_tab.setBackground(Color.LIGHT_GRAY);
        addclass_tab.setForeground(new java.awt.Color(51, 51, 51));

        classes_table.setModel(new javax.swing.table.DefaultTableModel(
                new Object[][]{
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null}
                },
                new String[]{
                        "Title 1", "Title 2", "Title 3", "Title 4"
                }
        ));
        addclass_spanel.setViewportView(classes_table);
        
        JLabel lblSemester = new JLabel("Semester :");
        
        JComboBox Semester_select = new JComboBox();
        Semester_select.addItemListener(new ItemListener() {
        	public void itemStateChanged(ItemEvent e) {
        	//	String query1 = Semester_select.getSelectedItem().toString();
        	//	String query2 =   ClassID_txt.getText().toUpperCase();
        	//	String query3 = (String) list_subject.getSelectedValue();
        	//	idFilter(query1, query2, query3);
        		
        	}

			
        });
        
        Semester_select.setModel(new DefaultComboBoxModel(new String[] {"Spring 2020", "Fall 2020"}));
        
        JLabel lblSubject = new JLabel("Subject:");
        
        list_subject = new JList();
        list_subject.addListSelectionListener(new ListSelectionListener() {
        	public void valueChanged(ListSelectionEvent e) {
        		
        	//	String query1 = Semester_select.getSelectedItem().toString();
        	//	String query2 =   ClassID_txt.getText().toUpperCase();
        	//	String query3 = (String) list_subject.getSelectedValue();
        	//	idFilter(query1, query2, query3);
        	}
        });
        list_subject.setModel(new AbstractListModel() {
        	String[] values = new String[] {"CSC", "HIST", "MATH"};
        	public int getSize() {
        		return values.length;
        	}
        	public Object getElementAt(int index) {
        		return values[index];
        	}
        });
        
        lblNewLabel = new JLabel("Class ID :");
        
        ClassID_txt = new JTextField();
        ClassID_txt.addKeyListener(new KeyAdapter() {
        	public void keyReleased(KeyEvent e) {
        	//	String query1 = Semester_select.getSelectedItem().toString();
        	//	String query2 =   ClassID_txt.getText().toUpperCase();
        	//	String query3 = (String) list_subject.getSelectedValue();
        	//	idFilter(query1, query2, query3);
        	}
        });
        ClassID_txt.setColumns(10);
        
        JButton btnSelect = new JButton("Select");
        btnSelect.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent e) {
        		String query1 = Semester_select.getSelectedItem().toString();
        		String query2 = (String) list_subject.getSelectedValue();
        		String query3 = (String) ClassID_txt.getText().toUpperCase();
        		idFilter(query1,query2, query3);

     		// idFilter();
			
     	}
     });


        javax.swing.GroupLayout addclass_tabLayout = new javax.swing.GroupLayout(addclass_tab);
        addclass_tabLayout.setHorizontalGroup(
        	addclass_tabLayout.createParallelGroup(Alignment.LEADING)
        		.addGroup(addclass_tabLayout.createSequentialGroup()
        			.addComponent(addclass_spanel, GroupLayout.PREFERRED_SIZE, 1023, GroupLayout.PREFERRED_SIZE)
        			.addGroup(addclass_tabLayout.createParallelGroup(Alignment.LEADING)
        				.addGroup(addclass_tabLayout.createSequentialGroup()
        					.addGap(38)
        					.addGroup(addclass_tabLayout.createParallelGroup(Alignment.LEADING)
        						.addComponent(lblSemester)
        						.addComponent(Semester_select, GroupLayout.PREFERRED_SIZE, 134, GroupLayout.PREFERRED_SIZE)
        						.addComponent(lblSubject)
        						.addComponent(list_subject, GroupLayout.PREFERRED_SIZE, 204, GroupLayout.PREFERRED_SIZE)
        						.addComponent(lblNewLabel)
        						.addComponent(ClassID_txt, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)))
        				.addGroup(addclass_tabLayout.createSequentialGroup()
        					.addGap(115)
        					.addComponent(btnSelect)))
        			.addContainerGap(134, Short.MAX_VALUE))
        );
        addclass_tabLayout.setVerticalGroup(
        	addclass_tabLayout.createParallelGroup(Alignment.LEADING)
        		.addGroup(addclass_tabLayout.createSequentialGroup()
        			.addGap(22)
        			.addComponent(lblSemester)
        			.addPreferredGap(ComponentPlacement.UNRELATED)
        			.addComponent(Semester_select, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
        			.addGap(44)
        			.addComponent(lblSubject)
        			.addGap(18)
        			.addComponent(list_subject, GroupLayout.PREFERRED_SIZE, 148, GroupLayout.PREFERRED_SIZE)
        			.addGap(18)
        			.addComponent(lblNewLabel)
        			.addPreferredGap(ComponentPlacement.UNRELATED)
        			.addComponent(ClassID_txt, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
        			.addGap(134)
        			.addComponent(btnSelect)
        			.addContainerGap(213, Short.MAX_VALUE))
        		.addComponent(addclass_spanel, GroupLayout.DEFAULT_SIZE, 751, Short.MAX_VALUE)
        );
        addclass_tab.setLayout(addclass_tabLayout);

        admin_tab.addTab("Add Class", addclass_tab);

        logout_button.setIcon(new javax.swing.ImageIcon(getClass().getResource("door12.png"))); // NOI18N
        logout_button.setText("Logout");
        logout_button.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                logout_buttonMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout admin_panelLayout = new javax.swing.GroupLayout(admin_panel);
        admin_panel.setLayout(admin_panelLayout);
        admin_panelLayout.setHorizontalGroup(
                admin_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(admin_tab, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, admin_panelLayout.createSequentialGroup()
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(logout_button)
                                .addGap(17, 17, 17))
        );
        admin_panelLayout.setVerticalGroup(
                admin_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, admin_panelLayout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(logout_button)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(admin_tab, javax.swing.GroupLayout.PREFERRED_SIZE, 797, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(admin_panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(admin_panel, javax.swing.GroupLayout.PREFERRED_SIZE, 841, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void logout_buttonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_logout_buttonMouseClicked
        int logout_con = JOptionPane.showConfirmDialog(null, "Are you sure you want to logout?", "Logout", JOptionPane.YES_NO_OPTION);

        if (logout_con == 0) {
            Login log = new Login();
            log.setVisible(true);
            log.pack();
            log.setLocationRelativeTo(null);
            log.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
            dispose();
        }
    }//GEN-LAST:event_logout_buttonMouseClicked

    private void fname_inputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fname_inputActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fname_inputActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Admin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Admin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Admin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Admin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new StudentRegistration().setVisible(true);
            }
        });
    }

    public void staricon() {
        setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("star-icon.png")));

    }

    public void fetchStudents (){

        try{

            String stdTable = "select * from students";
            pst = connection.prepareStatement(stdTable);
            rs = pst.executeQuery();


        } catch(Exception e){
            JOptionPane.showMessageDialog(null, e);

        }

    }
    public void fetchTeachers (){

        try{

            String teachTable = "select * from teacher";
            pst = connection.prepareStatement(teachTable);
            rs = pst.executeQuery();


        } catch(Exception e){
            JOptionPane.showMessageDialog(null, e);

        }

    }

    
    public void fetchClasses(){

        try{
            String classTable = "select teacher_class.class_id, teacher_class.CRN, teacher_class.semester, teacher_class.day, teacher_class.class_time, classes.class_name, classes.class_credit, classes.class_subj, teacher.teacher_last_name "
            		+ "from teacher_class INNER JOIN classes on classes.class_id = teacher_class.class_id "
            		+ "INNER JOIN teacher on teacher.teacher_id = teacher_class.teacher_id";
            pst = connection.prepareStatement(classTable);
            rs = pst.executeQuery();
            classes_table.setModel(DbUtils.resultSetToTableModel(rs));
            


        } catch(Exception e){
            JOptionPane.showMessageDialog(null, e);

        }

    }
    
   /* public void fetchSubject(){

        try{
            String classSubj = "select class_subj from classes";
            pst = connection.prepareStatement(classSubj);
            rs = pst.executeQuery();
            list_subject.setModel(ListDbUtils.resultSetToNestedList(rs));            


        } catch(Exception e){
            JOptionPane.showMessageDialog(null, e);

        }

    }*/
    


    public void fetchClassInstructor(){

        try{

            String cinstructTable = "select * from classes, teacher, teacher_class";
            pst = connection.prepareStatement(cinstructTable);
            rs = pst.executeQuery();


        } catch(Exception e){
            JOptionPane.showMessageDialog(null, e);

        }

    }
    
    private void filter(String query) {

		TableRowSorter<TableModel> tr = new TableRowSorter<TableModel>((DefaultTableModel)classes_table.getModel());
		classes_table.setRowSorter(tr);
		
		if (query != "None")
		{
			tr.setRowFilter(RowFilter.regexFilter(query));
		}else 
		{
			classes_table.setRowSorter(tr);
		}
	}
    
    private void idFilter(String query1  ,String query2, String query3)
    {
    	
    	ArrayList<RowFilter<Object,Object>> filters = new ArrayList<RowFilter<Object,Object>>(2);
    	filters.add(RowFilter.regexFilter(query1, 2));
    	filters.add(RowFilter.regexFilter(query2, 7));
    	filters.add(RowFilter.regexFilter(query3, 0 ));
    	
    	TableRowSorter<TableModel>	sorter = new TableRowSorter<TableModel>(classes_table.getModel());

    	
    	sorter.setRowFilter(RowFilter.andFilter(filters));	
    	classes_table.setRowSorter(sorter);
    	

    }
    
    javax.swing.JScrollPane addclass_spanel;
    private javax.swing.JPanel addclass_tab;
    private javax.swing.JPanel admin_panel;
    private javax.swing.JTabbedPane admin_tab;
    private javax.swing.JTable classes_table;
    private javax.swing.JButton logout_button;
    private JList list_subject;
    private JLabel lblNewLabel;
    private JTextField ClassID_txt;
    private JComboBox semester_select;
}